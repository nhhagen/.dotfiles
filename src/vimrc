" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
" vim: set tabstop=2 shiftwidth=2:

" No legacy vi, must be first {
  set nocompatible
" }

" Source the vimrc file after saving it {
  if has("autocmd")
    autocmd! bufwritepost .vimrc source $MYVIMRC | AirlineRefresh
  endif
" }

" Plugin management {
  filetype off

  " vim-plug install {
    let vimPlugInstalled = 1
    if empty(glob('~/.vim/autoload/plug.vim'))
      silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
      autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
      let vimPlugInstalled = 1
    endif
    call plug#begin('~/.vim/plugged')
  " }


  " General {
    Plug 'majutsushi/tagbar'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'airblade/vim-gitgutter'
    Plug 'nathanaelkane/vim-indent-guides'
    " Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
    " function FixupBase16(info)
    "     !sed -i '/Base16hi/\! s/a:\(attr\|guisp\)/l:\1/g' ~/.vim/plugged/base16-vim/colors/*.vim
    " endfunction
    " Plug 'chriskempson/base16-vim', { 'do': function('FixupBase16') }
    " Plug 'chriskempson/base16-vim'
    Plug 'danielwe/base16-vim'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'mileszs/ack.vim'
    Plug 'sjl/vitality.vim'
    Plug 'editorconfig/editorconfig-vim'
    Plug 'Raimondi/delimitMate'
    Plug 'mattn/webapi-vim' " Needed by gist-vim
    Plug 'mattn/gist-vim'
    " Plug 'greyblake/vim-preview'
    Plug 'kannokanno/previm'
    Plug 'mtth/scratch.vim'
    Plug 'nicwest/QQ.vim'
    Plug 'junegunn/limelight.vim'
    Plug 'DanielFGray/DistractionFree.vim'
    Plug 'tpope/vim-dispatch'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-commentary'
    Plug 'roman/golden-ratio'
    " Plug 'calebsmith/vim-lambdify'
    Plug 'tmux-plugins/vim-tmux'
    Plug 'duggiefresh/vim-easydir'
  " }

  " Completion {
    if has('mac')
      Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
      " Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --js-completer' }
    endif
    Plug 'lifepillar/vim-mucomplete'
  " }

  " JavaScript {
    Plug 'moll/vim-node'
    " Plug 'pangloss/vim-javascript'
    Plug 'jelera/vim-javascript-syntax'
    " Plug 'othree/javascript-libraries-syntax.vim'
    Plug 'vim-scripts/JavaScript-Indent'
    Plug 'mxw/vim-jsx'
    " Plug 'facebook/vim-flow'
    " Plug 'jparise/vim-graphql'
  " }

  " Ruby {
    Plug 'vim-ruby/vim-ruby'
    Plug 'tpope/vim-bundler'
    Plug 'tpope/vim-endwise'
  " }

  " Python {
    Plug 'lambdalisue/vim-pyenv', { 'for': ['python', 'python3'] }
    " Plug 'klen/python-mode'
    Plug 'davidhalter/jedi-vim'
    Plug 'hdima/python-syntax'
  "}

  " Misc language & syntax support {
    Plug 'w0rp/ale'
    " Plug 'vim-syntastic/syntastic'
    " Plug 'PProvost/vim-ps1'
    " Plug 'othree/html5.vim'
    Plug 'godlygeek/tabular'
    Plug 'plasticboy/vim-markdown'
    " Plug 'rodjek/vim-puppet'
    Plug 'saltstack/salt-vim'
    Plug 'chr4/nginx.vim'
    " Plug 'derekwyatt/vim-scala'
    " Plug 'gre/play2vim'
    Plug 'stephpy/vim-yaml'
    " Plug 'mustache/vim-mustache-handlebars'
    " Plug 'digitaltoad/vim-jade'
    " Plug 'robbles/logstash.vim'
    " Plug 'elixir-lang/vim-elixir'
    Plug 'vim-scripts/groovy.vim'
    " Plug 'vim-scripts/groovyindent'
    Plug 'docker/docker' , {'rtp': '/contrib/syntax/vim/'}
    Plug 'vim-scripts/haproxy'
    Plug 'hashivim/vim-terraform'
  " }
  Plug 'udalov/kotlin-vim'
  Plug 'artur-shaik/vim-javacomplete2'
  Plug 'chrisbra/csv.vim'
  " Plug 'xolox/vim-misc'
  " Plug 'xolox/vim-easytags'
  " Plug 'luochen1990/rainbow'

  " vim-plug install {
    call plug#end()
    if vimPlugInstalled == 0
      echo 'Installing plugins'
      echo ''
      :PlugInstall --sync
    endif
  " }
" }

source ~/.vim/includes/functions.vim

" Basics {
  filetype plugin indent on       " load file type plugins + indentation
  set title
  set noswapfile
  set nobackup
  set nowritebackup
  syntax enable
  set encoding=utf-8
  set showcmd                     " display incomplete commands
  set number
  set relativenumber
  set ruler
  set scrolloff=9                   " minimum lines above/below cursor
  set laststatus=2                  " always show status bar
  set autoread
  set autowrite
  set hidden
  set wildmenu            " visual autocomplete for command menu"
  set noshowmode
" }

" Spell {
  :set spellfile=~/.vim/spell/custom.utf-8.add
" }

" Colors & UI {
  set t_Co=256
  set t_ut=
  if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
  endif
  " let &colorcolumn="81,".join(range(121,999),",")
  " autocmd BufEnter * if &diff | set cursorline! | else | set cursorline | endif
  " set cursorline
  highlight SignColumn ctermbg=18
  highlight CursorLineNr ctermfg=9
  " highlight Comment cterm=italic
  " highlight Folded cterm=italic
  set fillchars+=vert:│ " must have whitespace after the |
  autocmd BufEnter * sign define dummy
  autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
  set list listchars=tab:\|_,trail:·
  autocmd Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/

  autocmd Syntax * highlight halfSpace ctermbg=9
  autocmd Syntax * syntax match halfSpace " "
" }

" Folding {
  set foldmethod=indent   " fold based on indent
  set foldnestmax=3       " deepest fold is 3 levels
  set foldlevel=100       " don't autofold anything (but let me do it if I want to)
" }

" Whitespace {
  set nowrap                      " don't wrap lines
  set tabstop=4 shiftwidth=4      " a tab is 4 spaces
  set smarttab                    " insert tabs on the start of a line according to shiftwidth, not tabstop
  set expandtab                   " use spaces, not tabs (optional)
  set backspace=indent,eol,start  " backspace through everything in insert mode
" }

" Searching {
  set hlsearch                    " highlight matches
  set incsearch                   " incremental searching
  set ignorecase                  " searches are case insensitive...
  set smartcase                   " ... unless they contain at least one capital letter
" }

" Buffer management {
  nmap <C-h> :bp<CR>
  nmap <C-l> :bn<CR>
  " nmap <C-w> :bd<CR> need to find a new key
" }

" { Terminal
  :tnoremap <Esc> <C-\><C-n>
" }

" Delimate {
  let delimitMate_expand_cr = 1
" }

" Airline {
  let g:airline#extensions#tabline#enabled = 1
  let g:airline_powerline_fonts = 1
  let g:airline_theme='base16'
  let g:airline_left_sep = ''
  let g:airline_right_sep = ''
  let g:airline_left_alt_sep = ''
  let g:airline_right_alt_sep = ''
" }

" YouCompleteMe {
"  let g:ycm_add_preview_to_completeopt = 1
"  let g:ycm_autoclose_preview_window_after_completion = 1
"  let g:ycm_collect_identifiers_from_comments_and_strings = 1
"  let g:ycm_collect_identifiers_from_tags_files = 1
"  let g:ycm_seed_identifiers_with_syntax = 1
"  let g:ycm_complete_in_comments = 1
" }

" MUcomplete {
  set completeopt-=preview
  set completeopt+=longest,menuone,noselect
  let g:jedi#popup_on_dot = 0  " It may be 1 as well
  set shortmess+=c   " Shut off completion messages
  set belloff+=ctrlg " If Vim beeps during completion
  let g:mucomplete#delayed_completion = 1

" }

" Ignores {
  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class,*.log,*/target/*,*/tags/*
  set wildignore+=*/node_modules/*
  set wildignore+=*/bower_components/*
  set wildignore+=*/analyze/*
  set wildignore+=*/.git/*
  set wildignore+=*/.svn/*
  set wildignore+=*/.idea/*,*/.idea_modules/*
  set wildignore+=*/.vagrant/*
  set wildignore+=*/.target/*
  set wildignore+=*.pyc
  set wildignore+=*/build/*
  set wildignore+=*/dist/*
  set wildignore+=*/prototype/*
  set wildignore+=*/.m2/*
" }

" Resize splits when the window is resized {
  au VimResized * exe "normal! \<c-w>="
" }

" Reselect visual block after indent/outdent {
  vnoremap < <gv
  vnoremap > >gv
" }

" Turn off normal arrow keys for navigation {
  noremap <Up> <nop>
  noremap <Down> <nop>
  noremap <Left> <nop>
  noremap <Right> <nop>
  inoremap  <Up> <NOP>
  inoremap  <Down> <NOP>
  inoremap  <Left> <NOP>
  inoremap  <Right> <NOP>
" }

" System clipboard support
  set clipboard=unnamed
" }

" Rainbow Parentheses {
  let g:rainbow_active = 1
  let g:rainbow_conf = { 'parentheses': [['(',')'], ['\[','\]'], ['{','}']], 'html': { 'parentheses': [] } }
" }

" eclim {
  if exists('EclimEnable')
    autocmd BufEnter * EclimDisable
    autocmd BufEnter *.java EclimEnable
  endif
" }

" ctrlp {
  let g:ctrlp_working_path_mode = ''
  let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
  let g:ctrlp_use_caching = 0
  let g:ctrlp_max_files=0
  let g:ctrlp_max_depth=40
  let g:ctrlp_show_hidden = 1
  let g:ctrlp_extensions = ['tag']
  let g:ctrlp_match_window = 'bottom,order:btt,min:1,max:10,results:30'
" }

" vim-indent-guides {
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_guide_size = 1
  let g:indent_guides_start_level = 2
  highlight IndentGuidesOdd  ctermbg=18 guibg=#282a2e
  highlight IndentGuidesEven ctermbg=18 guibg=#282a2e
  au VimEnter * :IndentGuidesEnable
" }

" Systastic {
  let g:syntastic_check_on_open=1
" }

" Scratch {
  let g:scratch_insert_autohide = 0
  let g:scratch_horizontal = 0
  let g:scratch_height = 50
"}

" JSX {
  let g:jsx_ext_required = 0
"}

" DistractionFree.vim {
  let g:distraction_free#toggle_limelight = 1
  let g:distraction_free#toggle_tmux = 1
  let g:distraction_free#toggle_options = [
        \ 'cursorline',
        \ 'colorcolumn',
        \ 'cursorcolumn',
        \ 'number',
        \ 'relativenumber',
        \ 'list',
        \ 'ruler',
        \ 'showtabline',
        \ 'laststatus',
        \]
"}

" hdima/python-syntax {
  let python_highlight_all = 1
" }

" kannokanno/previm {
  " let g:previm_open_cmd = 'open -a Safari'
  let g:previm_open_cmd = "open -a 'Google Chrome'"
"}

" Netrw {
  let g:netrw_banner=0
  let g:netrw_browse_split=4
  let g:netrw_altv=1
  let g:netrw_liststyle=3
"}

" airblade/vim-gitgutter.git {
  let g:gitgutter_sign_added = '┋'
  let g:gitgutter_sign_modified = '┋'
  let g:gitgutter_sign_removed = '┋'
  let g:gitgutter_sign_removed_first_line = '┋'
  let g:gitgutter_sign_modified_removed = '┋'
"}

" hashivim/vim-terraform {
  let g:terraform_align=1
  let g:terraform_fmt_on_save=0
" }

autocmd BufEnter,BufRead,BufNewFile .babelrc set filetype=json
autocmd BufEnter,BufRead,BufNewFile Jenkinsfile set filetype=groovy
autocmd BufEnter,BufRead,BufNewFile haproxy*.cfg set filetype=haproxy
autocmd BufEnter,BufRead,BufNewFile *.md setlocal spell
autocmd Filetype gitcommit setlocal spell

if jedi#init_python()
  function! s:jedi_auto_force_py_version() abort
    let g:jedi#force_py_version = pyenv#python#get_internal_major_version()
  endfunction
  augroup vim-pyenv-custom-augroup
    autocmd! *
    autocmd User vim-pyenv-activate-post   call s:jedi_auto_force_py_version()
    autocmd User vim-pyenv-deactivate-post call s:jedi_auto_force_py_version()
  augroup END
endif

" artur-shaik/vim-javacomplete2 {
  autocmd FileType java setlocal omnifunc=javacomplete#Complete
" }
